# Leontine: Technical Architecture and Implementation Documentation

## Project Overview

Leontine is a Progressive Web Application (PWA) that provides a clean, modern client interface for the WhisperX API audio transcription service. Built with vanilla JavaScript, HTML, and CSS, it implements an Elm-like architecture to create a predictable, maintainable, and responsive interface for transcribing audio files.

## Architecture

The application is built on a unidirectional data flow model inspired by the Elm Architecture. This pattern ensures a predictable application state and simplifies debugging.

### Core Principles

1.  **Single Source of Truth (State)**: The entire state of the application is stored in a single JavaScript object. This object is the sole authority for what is displayed on the screen.
2.  **State is Immutable**: The state object is never modified directly. To change the state, the application must dispatch an action.
3.  **Changes via Pure Functions (Update)**: State transitions are handled by a single, pure function (`State.update`). This "reducer" takes the current state and an action, and returns a *new* state object, describing the application's next state.
4.  **UI as a Function of State (View)**: The user interface is a pure representation of the current state. A single `Render.render` function is responsible for taking the state object and updating the DOM to match it.

This creates a clear and predictable loop:
`Event -> Dispatch Action -> Update State -> Render UI`

### Module Structure

The application logic is split into focused modules, each with a single responsibility.

1.  **Configuration (`js/conf.js`)**
    -   Centralizes constants: API endpoints, timing intervals, storage keys, etc.
    -   Not part of the core application loop, but provides configuration to all modules.

2.  **UI Elements (`js/ui.js`)**
    -   A simple utility module responsible only for caching DOM element references on startup for efficient access. It holds no state and performs no DOM manipulation itself.

3.  **API Library (`js/api.js`)**
    -   A stateless library for all communication with the WhisperX API.
    -   Exports functions that each perform a single network request (e.g., `submitTranscription`, `checkJobStatus`) and return a `Promise`.
    -   It is completely unaware of the application's state or UI.

4.  **State Management (`js/state.js`)**
    -   The "brain" of the application.
    -   Defines the shape of the `initialState`.
    -   Contains the pure `update` function (the reducer), which is the only place state transition logic is defined.

5.  **Rendering (`js/render.js`)**
    -   The "hands" of the application.
    -   Contains the `render` function, which is responsible for all DOM manipulation.
    -   It takes the current state and makes the UI match it, creating, updating, or removing elements as needed.

6.  **Orchestrator (`js/main.js`)**
    -   The central coordinator that ties everything together.
    -   Initializes the application and sets up event listeners.
    -   Contains the `dispatch` function, which drives the application loop.
    -   Manages all **side effects** (e.g., making API calls using the `Api` library, managing timers with `setInterval`, and interacting with `localStorage`).

### Data Flow

1.  **Initialization**
    -   On `DOMContentLoaded`, `main.js`'s `init` function is called.
    -   It caches DOM elements via `UI.init()`.
    -   It sets up event listeners. Each listener's callback does only one thing: `dispatch` an action.
    -   It checks `localStorage` for a saved API URL or a pending job and dispatches actions to load them into the state.
    -   It performs the initial render by calling `Render.render()`.

2.  **User Interaction (or Timer Event)**
    -   An event listener is triggered (e.g., a button click).
    -   The listener calls `dispatch({ type: 'ACTION_NAME', payload: ... })`.

3.  **State Update Cycle (inside `dispatch`)**
    -   `dispatch` receives the action.
    -   It calls `State.update(action, currentState)` to compute the `newState`.
    -   It calls `handleSideEffects(action, newState)`.
        -   If the action requires a side effect (like an API call), this function will execute it. For example, it might call `Api.submitTranscription()`.
        -   The promise returned by the API call will have its `.then()` and `.catch()` handlers set up to `dispatch` *new* actions (e.g., `JOB_SUBMIT_SUCCESS` or `JOB_SUBMIT_FAILED`).
    -   The global `state` variable is updated to the `newState`.
    -   `dispatch` calls `Render.render(newState, dispatch)`, which updates the DOM to reflect the new state.

## Key Technical Implementations

### State Management
-   **Elm-like Architecture**: Provides a predictable, unidirectional data flow. All application changes follow a strict, debuggable path.
-   **LocalStorage Persistence**: Side effects managed in `main.js` handle saving and loading the API URL and active job ID to `localStorage`, allowing for session recovery.
-   **Centralized Side Effects**: All impure operations (timers, network requests, storage) are managed in `main.js`, keeping the state and render logic pure and testable.

### Asynchronous Processing Model
-   **Declarative Polling**: Polling is initiated and terminated declaratively based on state transitions handled in `main.js`. For example, the polling timer starts only when the `job.status` transitions to `POLLING`.
-   **Promise-Based API**: The `api.js` library uses the `fetch` API exclusively, returning promises that the orchestrator in `main.js` uses to dispatch subsequent success or failure actions.

### PWA & Styling
-   **Service Worker (`sw.js`)**: Provides offline caching for static assets.
-   **Web App Manifest (`manifest.json`)**: Enables PWA installation.
-   **Style Separation**: `style.css` contains the static layout and look of the application, while `reactive.css` contains all styles related to state changes (animations, visibility classes, status indicators).

## File Structure

```
leontine/
├── index.html          # Main HTML entry point
├── style.css           # Static structural and visual styles
├── reactive.css        # Dynamic styles for state changes and animations
├── manifest.json       # PWA manifest file
├── sw.js               # Service worker for offline functionality
├── favicon.ico         # Site favicon
├── js/                 # JavaScript modules
│   ├── conf.js         # Configuration constants
│   ├── ui.js           # DOM element cacher
│   ├── api.js          # Stateless API library
│   ├── state.js        # State definition and update function
│   ├── render.js       # DOM rendering logic
│   └── main.js         # Application orchestrator and side effect handler
└── images/             # Icons for PWA installation
    ├── icon-192.png    # 192x192 app icon
    └── icon-512.png    # 512x512 app icon
```

## Technical Decisions and Rationales

1.  **Elm-like Architecture**
    -   **Rationale**: To create a highly predictable and debuggable application. With a single state object and unidirectional data flow, it's always clear why the UI is in a certain state. It eliminates complex, hard-to-trace bugs common in event-driven code where many parts of the application can modify the state and DOM independently.
    -   **Benefit**: Excellent maintainability and scalability. Adding new features involves extending the state shape, adding action types, and updating the relevant functions, all in a clear, structured way.

2.  **No External Dependencies**
    -   **Rationale**: Ensures a minimal footprint, fast load times, and complete control over the codebase. It avoids the overhead and potential security vulnerabilities of external libraries.
    -   **Benefit**: Simplifies maintenance and deepens understanding of the underlying browser APIs.

3.  **Separation of Concerns**
    -   **Rationale**: Each module has a single, well-defined responsibility (state logic, rendering, API calls, orchestration).
    -   **Benefit**: This makes the code easier to understand, test, and refactor. For example, the entire UI's appearance can be changed by modifying `render.js` without touching any application logic.

4.  **Native JavaScript Modules (ESM)**
    -   **Rationale**: To leverage the browser's built-in module system (`import`/`export`) for handling dependencies. This avoids polluting the global `window` object and eliminates script-loading order issues.
    -   **Benefit**: Creates a cleaner, more robust, and more maintainable codebase where dependencies are explicit and scoped to each file.
