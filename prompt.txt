Please read carefully the README.md file. Then read all the code within all the rust files in the src directory and take a good attention to the inline comments. Finally, compose a very detailed prompt about what and how does this project with technical details so you could use this prompt to understand the current project status at once. Please edit the prompt.txt file and write this detailed prompt under the line with stars "********************"

***************************************************************************************************************

# Leontine

## Project Description
This project implements Leontine, a modern web client for the WhisperX API transcription service. The application is built using only HTML, CSS, and JavaScript to ensure maximum compatibility and easy adaptation to various environments, including standalone web applications and Progressive Web Apps (PWAs) for both desktop and mobile devices.

## Main Goals
- Create a user-friendly interface for audio transcription services
- Implement fully responsive design for all device types
- Support PWA capabilities for offline access and app installation
- Provide a seamless experience for uploading, monitoring, and retrieving transcriptions
- Implement proper error handling and retry mechanisms
- Store user preferences locally for convenience

## Architecture
The application follows a modular architecture with clear separation of concerns:

### Core Modules
1. **API Module** - Handles all communication with the WhisperX API
2. **UI Module** - Manages user interface interactions and updates
3. **Storage Module** - Handles local storage for user preferences
4. **App Module** - Orchestrates the application workflow and connects all modules

### User Workflow
1. User configures API settings (URL and authentication token)
2. User uploads an audio file and sets transcription options
3. Client sends the transcription request to the API
4. Client polls for status updates and displays progress
5. When transcription is complete, results are displayed and can be copied or downloaded
6. User can start a new transcription or modify settings

## File Structure
```
llm/
├── index.html            # Main HTML interface
├── css/
│   └── styles.css        # Application styling
├── js/
│   ├── api.js            # API communication module
│   ├── storage.js        # Local storage management
│   ├── ui.js             # User interface interactions
│   └── app.js            # Main application logic
├── assets/               # Icons and images
│   ├── icon-192x192.png  # PWA icons
│   └── icon-512x512.png  # PWA icons
├── manifest.json         # PWA manifest for installation
└── service-worker.js     # PWA service worker for offline functionality
```

## File Descriptions

### index.html
The main HTML file that defines the structure of the application. It includes sections for:
- Authentication settings
- File upload and transcription options
- Status tracking and progress indicators
- Result display with copy and download functionality
- Notifications for user feedback

### styles.css
Contains all styling for the application, including:
- Responsive layout with media queries
- UI components (buttons, inputs, cards)
- Animations and transitions
- Status indicators and progress bars
- Notification system

### api.js
Handles all communication with the WhisperX API:
- Configuring API settings (URL and authentication token)
- Sending transcription requests with file uploads
- Polling for job status and queue position
- Retrieving transcription results
- Canceling pending jobs
- Error handling and retry logic

### storage.js
Manages local storage for persistent settings:
- Saving and retrieving API credentials
- Storing user preferences (language, model, output format)
- Handling storage errors gracefully

### ui.js
Manages all user interface interactions:
- Initializing event listeners
- Updating UI based on application state
- Handling file uploads (drag-and-drop and file selector)
- Displaying status updates and progress
- Showing notifications for feedback
- Managing result display and actions

### app.js
The main application file that connects all modules:
- Initializing the application
- Orchestrating workflow between modules
- Error handling and recovery

### manifest.json
PWA manifest file that enables installation:
- Application metadata (name, description)
- Icons for various screen sizes
- Display preferences
- Start URL and scope

### service-worker.js
Service worker for PWA functionality:
- Caching static assets for offline use
- Handling fetch events
- Managing cache updates

## WhisperX API Integration
Leontine integrates with the WhisperX API, which provides:
- Audio file transcription with multiple language support
- Speaker diarization for multi-speaker audio
- Various output formats (TXT, SRT, VTT, JSON, TSV)
- Job queuing system with status tracking
- Authentication via Bearer tokens

## PWA Considerations
The application is designed as a Progressive Web App with:
- Service worker for offline capabilities
- Web app manifest for installation
- Responsive design for all screen sizes
- Local storage for settings persistence

## Future Enhancements
Potential areas for future development:
- Real-time transcription with WebSockets
- Support for batch processing multiple files
- Enhanced visualization of diarized transcripts
- Integration with cloud storage services
- Transcript editing capabilities
- Advanced search and filtering of transcripts
